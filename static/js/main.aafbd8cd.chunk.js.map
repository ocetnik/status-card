{"version":3,"sources":["Avatar.jsx","Badge.jsx","Labels.jsx","StatusCard.jsx","serviceWorker.js","index.js","App.js"],"names":["src_Avatar","_ref","imageUrl","children","react_default","a","createElement","className","style","backgroundImage","concat","WithWrapper","renderImage","src_Badge","_ref2","circleColor","Badge_WithWrapper","backgroundColor","src_Labels","title","subtitle","src_StatusCard","cardRef","useRef","_useState","useState","setMounted","Object","slicedToArray","useEffect","ref","current","clientWidth","cardWrapperClassName","renderContent","Boolean","window","location","hostname","match","ReactDOM","render","forceUpdate","setValue","useForceUpdate","addEventListener","removeEventListener","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAIeA,SAAA,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,SAAUC,EAAbF,EAAaE,SAAb,OACbD,EACEE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQC,MAAO,CAAEC,gBAAe,OAAAC,OAASR,EAAT,OAC5CC,IAILA,ICREQ,SAAc,SAAAV,GAAA,IAAGW,EAAHX,EAAGW,YAAaT,EAAhBF,EAAgBE,SAAhB,OAClBS,EAAcT,EAAWC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBJ,KAE5CU,EAAA,SAAAC,GAAA,IAAGF,EAAHE,EAAGF,YAAaG,EAAhBD,EAAgBC,YAAhB,OACbX,EAAAC,EAAAC,cAACU,EAAD,CAAaJ,YAAaA,GACxBR,EAAAC,EAAAC,cAAA,OACEC,UAAS,QAAAG,OAAUE,EAAc,sBAAwB,IACzDJ,MAAO,CAAES,gBAAiBF,OCPjBG,SAAA,SAAAjB,GAAA,IAAGkB,EAAHlB,EAAGkB,MAAOC,EAAVnB,EAAUmB,SAAV,OACbhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeY,GAC9Bf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASa,MCCbC,SAAA,SAAApB,GAAgD,IAA7Cc,EAA6Cd,EAA7Cc,YAAab,EAAgCD,EAAhCC,SAAUiB,EAAsBlB,EAAtBkB,MAAOC,EAAenB,EAAfmB,SACxCE,EAAUC,iBAAO,MADsCC,EAGtCC,oBAAS,GAAvBC,EAHoDC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAK7DK,oBAAU,WACRH,GAAW,IACV,IAmBH,OAAOtB,EAAAC,EAAAC,cAAA,OAAKwB,IAAKR,GAAUA,EAAQS,SAjBb,WACpB,IAAMnB,EAAcU,EAAQS,QAAQC,YAAc,IAE5CC,EAAoB,gBAAAvB,OACxBE,EAAc,0BAA4B,8BAG5C,OACER,EAAAC,EAAAC,cAAA,OAAKC,UAAW0B,GACd7B,EAAAC,EAAAC,cAACN,EAAD,CAAQE,SAAUU,GAAeV,GAC/BE,EAAAC,EAAAC,cAACO,EAAD,CAAOD,YAAaA,EAAaG,YAAaA,KAEhDX,EAAAC,EAAAC,cAACY,EAAD,CAAQC,MAAOA,EAAOC,SAAUA,KAKQc,MCtB5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrC,EAAAC,EAAAC,cCGD,WACb,IAAMoC,EANe,WAAM,IAAAlB,EACNC,mBAAS,IAArBkB,EADkBhB,OAAAC,EAAA,EAAAD,CAAAH,EAAA,MAE3B,OAAO,kBAAMmB,EAAS,KAIFC,GASpB,OAPAf,oBAAU,WAER,OADAO,OAAOS,iBAAiB,SAAUH,GAC3B,WACLN,OAAOU,oBAAoB,SAAUJ,MAKvCtC,EAAAC,EAAAC,cAACe,EAAD,CACEN,YAAY,UACZb,SAAS,mDACTiB,MAAM,cACNC,SAAS,kBDlBC,MAAS2B,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aafbd8cd.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Avatar.css';\n\nexport default ({ imageUrl, children }) =>\n  imageUrl ? (\n    <div className=\"Image-wrapper\">\n      <div className=\"Image\" style={{ backgroundImage: `url(${imageUrl})` }}>\n        {children}\n      </div>\n    </div>\n  ) : (\n    children\n  );\n","import React from 'react';\n\nimport './Badge.css';\n\nconst WithWrapper = ({ renderImage, children }) =>\n  renderImage ? children : <div className=\"Badge-wrapper\">{children}</div>;\n\nexport default ({ renderImage, circleColor }) => (\n  <WithWrapper renderImage={renderImage}>\n    <div\n      className={`Badge${renderImage ? ' Badge-inside-image' : ''}`}\n      style={{ backgroundColor: circleColor }}\n    />\n  </WithWrapper>\n);\n","import React from 'react';\n\nimport './Labels.css';\n\nexport default ({ title, subtitle }) => (\n  <div className=\"Labels-wrapper\">\n    <div className=\"Label Title\">{title}</div>\n    <div className=\"Label\">{subtitle}</div>\n  </div>\n);\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport Avatar from './Avatar';\nimport Badge from './Badge';\nimport Labels from './Labels';\n\nimport './StatusCard.css';\n\nexport default ({ circleColor, imageUrl, title, subtitle }) => {\n  const cardRef = useRef(null);\n\n  const [, setMounted] = useState(false);\n  // componentDidMount (set initial cardRef)\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  const renderContent = () => {\n    const renderImage = cardRef.current.clientWidth > 160;\n\n    const cardWrapperClassName = `Card-wrapper ${\n      renderImage ? 'Card-wrapper-with-image' : 'Card-wrapper-without-image'\n    }`;\n\n    return (\n      <div className={cardWrapperClassName}>\n        <Avatar imageUrl={renderImage && imageUrl}>\n          <Badge renderImage={renderImage} circleColor={circleColor} />\n        </Avatar>\n        <Labels title={title} subtitle={subtitle} />\n      </div>\n    );\n  };\n\n  return <div ref={cardRef}>{cardRef.current && renderContent()}</div>;\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect, useState } from 'react';\n\nimport StatusCard from './StatusCard';\n\nconst useForceUpdate = () => {\n  const [, setValue] = useState({});\n  return () => setValue({});\n};\n\nexport default () => {\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    window.addEventListener('resize', forceUpdate);\n    return () => {\n      window.removeEventListener('resize', forceUpdate);\n    };\n  });\n\n  return (\n    <StatusCard\n      circleColor=\"#00bd41\"\n      imageUrl=\"http://www.avatarsdb.com/avatars/andy_warhol.jpg\"\n      title=\"Andy Warhol\"\n      subtitle=\"Online | 12h\"\n    />\n  );\n};\n"],"sourceRoot":""}